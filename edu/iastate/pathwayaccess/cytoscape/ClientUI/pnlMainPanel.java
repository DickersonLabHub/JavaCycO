/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * mainPanel.java
 *
 * Created on Jul 12, 2010, 10:38:19 AM
 */

package edu.iastate.pathwayaccess.cytoscape.ClientUI;

import edu.iastate.pathwayaccess.cytoscape.PathwayAccessPlugin;
import edu.iastate.pathwayaccess.cytoscape.ResultListItems.SearchResultInterface;
import edu.iastate.pathwayaccess.cytoscape.NewThreadWorker;
import edu.iastate.pathwayaccess.cytoscape.PluginProperties;
import edu.iastate.pathwayaccess.cytoscape.PropertiesInterface;
import java.awt.CardLayout;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Greg
 */
public class pnlMainPanel extends javax.swing.JPanel {

    /**
     * Default text for the search field
     */
    public static final String DEFAULT_SEARCH_TERM = "Enter/Import search term(s) seperated by commas";
    /**
     * Access to the MetNet Database
     */
    private PathwayAccessPlugin databaseAccess;
    /**
     * Stores the window manager to call when next or back buttons are pressed
     */
    private WindowManager winManager;
    /**
     * Stores common properties specific to the database in use
     */
    PluginProperties properties;
    /**
     * Stores the containing frame
     */
    private javax.swing.JFrame frame;
    /**
     * List of available organisms
     */
    private String[] organisms;
    /**
     * List of available search types
     */
    private String[] searchTypes;
    /**
     * Panel with description before search has been performed
     */
    private pnlNoSearchResults preSearchPane;
    /**
     * Results panel used to display searches
     */
    private pnlResultsSplitPane resultsPane;
    /**
     * A singleton instance of the pnlSelectNetwork (GUI contining advanced
     * network creation options and a list to select the CyNetwork in which to
     * download new data). The variable being singleton allows the plugin to be
     * closed and re-opened to the same window and results.
     */
    private pnlSelectNetwork pnlSelectNetwork = null;
    /*
     * Stores the layout of all available panels:
     *    "PRESEARCH" = preSearchPane
     *    "RESULTS"   = resultsPane
     */
    private CardLayout layout;
    /**
     * Status bar for all progress
     */
    //private pnlStatusBar statusBar = new pnlStatusBar(false);

    /** Creates new form mainPanel */
    public pnlMainPanel(PathwayAccessPlugin databaseAccess, WindowManager winManager, PluginProperties properties, javax.swing.JFrame frame) {
        //Set the access to the database
        this.databaseAccess = databaseAccess;
        this.winManager = winManager;
        //Set the frame of the client
        this.frame = frame;
        //Stores whether search has already been performed; used to determine whether
        //to display description (preSearchPane) or previous results (resultsPane)
        boolean resultsAvailable = true;

        /* Create Global Variables: Only created once so results will still be
         * displayed after closing and re-opening this frame */
        if(preSearchPane == null)
            preSearchPane = new pnlNoSearchResults(frame, properties);
        if(resultsPane == null)
        {
            resultsPane = new pnlResultsSplitPane(databaseAccess, winManager, properties, frame);
            resultsAvailable = false;
        }

        //Get list of availabe organisms and search types
        try {
            organisms = databaseAccess.getOrganismNames();
            searchTypes = databaseAccess.getSearchTypes();
        } catch(Exception e) {
            PopupMessages.databaseConnectionError(null, winManager, properties, true, true);
        }

        initComponents();
        
        /* Setup the Results Panel */
        layoutResults.add(preSearchPane, "PRESEARCH");
        layoutResults.add(resultsPane, "RESULTS");
        layoutResults.setVisible(true);
        layout = (CardLayout) (layoutResults.getLayout());
        if(!resultsAvailable) //Display description of the plugin
            layout.show(layoutResults, "PRESEARCH");
        else //Display previous results
            layout.show(layoutResults, "RESULTS");

        /* Setup the Status Bar Panel */
        pnlStatusBar statusBar = new pnlStatusBar(false, new NewThreadWorker());
        statusBar.setTaskString("Choose a search");
        layoutStatusBar.add(statusBar, "STATUS");
        layoutStatusBar.setVisible(true);
        CardLayout cl = (CardLayout) (layoutStatusBar.getLayout());
        cl.show(layoutStatusBar, "STATUS");
        
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                txtSearchTerm = new javax.swing.JTextField();
                cboOrganism = new javax.swing.JComboBox(organisms);
                btnSearch = new javax.swing.JButton();
                sepUpper = new javax.swing.JSeparator();
                layoutResults = new javax.swing.JPanel();
                btnImport = new javax.swing.JButton();
                lblSearchType = new javax.swing.JLabel();
                cboSearchType = new javax.swing.JComboBox(searchTypes);
                lblOrgansm = new javax.swing.JLabel();
                chkWholeWord = new javax.swing.JCheckBox();
                layoutStatusBar = new javax.swing.JPanel();
                sepLower = new javax.swing.JSeparator();

                setMinimumSize(new java.awt.Dimension(555, 462));

                txtSearchTerm.setText(DEFAULT_SEARCH_TERM);
                txtSearchTerm.setToolTipText("Search term to use (seperate multiple terms with commas)");
                txtSearchTerm.addFocusListener(new java.awt.event.FocusAdapter() {
                        public void focusGained(java.awt.event.FocusEvent evt) {
                                txtSearchTermFocusGained(evt);
                        }
                        public void focusLost(java.awt.event.FocusEvent evt) {
                                txtSearchTermFocusLost(evt);
                        }
                });
                txtSearchTerm.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                txtSearchTermKeyPressed(evt);
                        }
                });

                cboOrganism.setToolTipText("Organism to Search");

                btnSearch.setText("Search");
                btnSearch.setToolTipText("Execute Search");
                btnSearch.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnSearchActionPerformed(evt);
                        }
                });

                layoutResults.setLayout(new java.awt.CardLayout());

                btnImport.setText("Import");
                btnImport.setToolTipText("Import names from a text file of comma seperated search terms");
                btnImport.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnImportActionPerformed(evt);
                        }
                });

                lblSearchType.setText("Search Type:");

                cboSearchType.setToolTipText("Type of Searches");

                lblOrgansm.setText("Organism:");

                chkWholeWord.setText("Whole Word Only");

                layoutStatusBar.setLayout(new java.awt.CardLayout());

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(layoutResults, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                                        .addComponent(layoutStatusBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                                        .addComponent(sepUpper, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                                        .addComponent(sepLower, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(txtSearchTerm, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chkWholeWord)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnImport))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(lblSearchType)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cboSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblOrgansm)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cboOrganism, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                                                .addComponent(btnSearch)))
                                .addContainerGap())
                );

                layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cboOrganism, cboSearchType});

                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtSearchTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnImport)
                                        .addComponent(chkWholeWord))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblSearchType)
                                        .addComponent(cboSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSearch)
                                        .addComponent(lblOrgansm)
                                        .addComponent(cboOrganism, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sepUpper, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(layoutStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sepLower, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(layoutResults, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents

    /**
     * Executes search when search button is pressed
     * @param evt Button press event
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        executeSearch();
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * Sets text field text to blank when selected
     * @param evt Selection event
     */
    private void txtSearchTermFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchTermFocusGained
        txtSearchTerm.selectAll();//.setText("");
    }//GEN-LAST:event_txtSearchTermFocusGained

    /**
     * If the text field is left blank or just whitespace when de-selected, this
     * sets the field back to its default text.
     * @param evt De-selection event
     */
    private void txtSearchTermFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchTermFocusLost
        if(txtSearchTerm.getText().trim().length() == 0)
            txtSearchTerm.setText(DEFAULT_SEARCH_TERM);
    }//GEN-LAST:event_txtSearchTermFocusLost

    /**
     * Opens a file browser to allow the user to select a text file. The 
     * contents of the text file is parsed for the first line of text.
     * @param evt Import Button press event
     */
    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        //Display FileChooser to pick new directory
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        //Set the new given path if the user chose one, otherwise exit
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            //Check that the text file can be read
            File file = fc.getSelectedFile();
            try {
                if(!file.canRead())
                {
                    JOptionPane.showMessageDialog(this,
                            "The given file can't be read.",
                            "Read Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!file.getName().contains(".txt"))
                    JOptionPane.showMessageDialog(this,
                            "The given file is not a text file. Only comma seperated\n"
                            + "text files will be accepted.",
                            "File Type Error",
                            JOptionPane.ERROR_MESSAGE);
            } catch(SecurityException e) {
                JOptionPane.showMessageDialog(this,
                            "You don't have permission to use the given file.",
                            "Security Error",
                            JOptionPane.ERROR_MESSAGE);
                return;
            }
            //Get the contens of the file
            try {
                Scanner scanner = new Scanner(file);
                if(scanner.hasNextLine())
                    txtSearchTerm.setText(scanner.nextLine());
                if(scanner.hasNextLine())
                    JOptionPane.showMessageDialog(this,
                            "The given file has multiple lines. Only the first line"
                            + " of comma seperated search terms will be accepted.",
                            "Improper Format Warning",
                            JOptionPane.WARNING_MESSAGE);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this,
                            "The given file can't be read.",
                            "Read Error",
                            JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnImportActionPerformed

    /**
     * Occurs when a key is pressed inside the search term text field; listens
     * for the resturn key and executes a search.
     * @param evt Key press event
     */
    private void txtSearchTermKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchTermKeyPressed
        int keyPressed = evt.getKeyCode();
            if (keyPressed == 10) // Return Key
                executeSearch();
    }//GEN-LAST:event_txtSearchTermKeyPressed

    /**
     * Updates the pnlStatusBar to recieve updates from the given Thread worker
     * @param worker Thread worker to recieve updates from
     * @param indeterminate True if the progress bar status is indeterminate
     */
    protected void setStatusWorker(NewThreadWorker worker, boolean indeterminate)
    {
        //Create new loading bar for this task
        pnlStatusBar statusBar = new pnlStatusBar(indeterminate, worker);
        layoutStatusBar.removeAll(); //Remove old loading bar
        layoutStatusBar.add(statusBar, "STATUS"); //Add new loading bar
    }

    /**
     * Searches for results in the database based on the given search term, type,
     * and organism and creates a new panel with the results.
     */
    private void executeSearch() {
        //Create the new search task
        NewThreadWorker worker = new NewThreadWorker()
        {
            @Override
            public Void doInBackground()
            {
                //Prepare Status Bar
                this.setStatusBarProgress(0);
                this.setStatusTitle("Preparing to Search...");
                //Get given search info
                String searchTerm = txtSearchTerm.getText();
                Boolean wholeWord = chkWholeWord.isSelected();
                String organism = (String) cboOrganism.getSelectedItem();
                String searchType = (String) cboSearchType.getSelectedItem();
                //Execute search
                ArrayList<SearchResultInterface> results = null;
                try {
                    results = databaseAccess.search(
                            searchTerm, wholeWord, organism, searchType, this);
                } catch(Exception e) {
                    PopupMessages.databaseConnectionError(null, winManager, properties, true, true);
                }
                //Display the results if task wasn't canceled
                if(!this.isCancelled())
                {
                    resultsPane.setResults(results);
                    layout.show(layoutResults, "RESULTS");
                }
                return null;
            }
            @Override
            public void done()
            {
                this.setStatusTitle("Search Complete");
                btnImport.setEnabled(true);
                btnSearch.setEnabled(true);
            }
        };
        //Disable the Import and Search Buttons
        btnImport.setEnabled(false);
        btnSearch.setEnabled(false);
        //Create new loading bar for this task
        setStatusWorker(worker, false);
        //Begin the task
        worker.execute();
    }

    /**
     * Displays the panel of search results. This should ONLY be called to go back
     * from pnlSelectNetwork without having to create a new search.
     */
    protected void displayPnlSearchResults()
    {
        layout.show(layoutResults, "RESULTS");
    }

    /**
     * Display the panel for choosing which CyNetwork to download new data to
     * and other advanced options.
     */
    protected void displayPnlNetworkSearch()
    {
        //Create a singleton object of the panel
        if(pnlSelectNetwork == null)
            pnlSelectNetwork = new pnlSelectNetwork(databaseAccess, winManager);
        //Show the new panel
        //layoutResults.removeAll();
        layoutResults.add(pnlSelectNetwork, "OPTIONS");
        layout.show(layoutResults, "OPTIONS");
    }

    /**
     * Returns the organism selected by the user. It can be anything returned by
     * PathwayAccessPlugin.getOrganismNames(), including "All Organisms"
     * @return The organism selected by the user
     * @see PathwayAccessPlugin
     */
    public String getOrganism()
    {
        return (String) cboOrganism.getSelectedItem();
    }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnImport;
        private javax.swing.JButton btnSearch;
        private javax.swing.JComboBox cboOrganism;
        private javax.swing.JComboBox cboSearchType;
        private javax.swing.JCheckBox chkWholeWord;
        private javax.swing.JPanel layoutResults;
        private javax.swing.JPanel layoutStatusBar;
        private javax.swing.JLabel lblOrgansm;
        private javax.swing.JLabel lblSearchType;
        private javax.swing.JSeparator sepLower;
        private javax.swing.JSeparator sepUpper;
        private javax.swing.JTextField txtSearchTerm;
        // End of variables declaration//GEN-END:variables

}
