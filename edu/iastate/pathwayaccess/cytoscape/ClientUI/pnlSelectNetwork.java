package edu.iastate.pathwayaccess.cytoscape.ClientUI;

import edu.iastate.pathwayaccess.cytoscape.PathwayAccessPlugin;
import edu.iastate.pathwayaccess.cytoscape.SynonymTool;
import edu.iastate.pathwayaccess.cytoscape.NewThreadWorker;
import edu.iastate.pathwayaccess.cytoscape.PropertiesInterface;
import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.MutableComboBoxModel;
import javax.swing.event.HyperlinkEvent;

/**
 * Creates a panel to choose to create a new CyNetwork or an existing CyNetwork.
 * @author Greg
 */
public class pnlSelectNetwork extends javax.swing.JPanel {
    /**
     * Access to the Database
     */
    private PathwayAccessPlugin database;
    /**
     * Stores the window manager to call when next or back buttons are pressed
     */
    private WindowManager winManager;
    /**
     * Stores whether tasks pertaining to existing networks should be canceled
     */
    //private Boolean isExistNetCanceled = false;
    /**
     * Stores whether the Next button should be enabled
     */
    private Boolean enableNext = false;
    /**
     * Stores the existing networks in Cytoscape
     */
    private CyNetwork[] networks;
    /**
     * Stores the names of the existing networks in Cytoscape
     */
    private String[] networkNames;
    /**
     * Default value of combo-box if no existing network is chosen
     */
    private final String NO_NET_SELECTED = "Select an Existing Network";
    /**
     * Default value of the text-box for a new network name
     */
    private final String ENTER_NEW_NET_NAME = "<Enter a New Network Name>";
    /**
     * Stores the table for selecting highly connected entities
     */
    private pnlCheckboxTable highlyCon;

    /**
     * Creates new form pnlSelectNetwork.
     */
    public pnlSelectNetwork(PathwayAccessPlugin database, WindowManager winManager) {
        this.database = database;
        this.winManager = winManager;
        updateNetworks();
        initComponents();
        //Create highly connected entities table
        highlyCon = new pnlCheckboxTable(10);
        /* Display the Pathway Tabs Panel */
        pnlHighlyCon.add(highlyCon, "HIGHLYCONENT");
        pnlHighlyCon.setVisible(true);
        CardLayout cl = (CardLayout)(pnlHighlyCon.getLayout());
        cl.show(pnlHighlyCon, "HIGHLYCONENT");

        this.setVisible(true);
        
        //Get the highly connected entity data
        String[] highlyConNames = database.getProperties().getHighlyConnectedEntityNames();
        Object[][] highlyConData = new Object[highlyConNames.length][2];
        for(int i = 0; i < highlyConNames.length; i++)
        {
            highlyConData[i][0] = new Boolean(false);
            highlyConData[i][1] = highlyConNames[i];
        }
        highlyCon.setData(new String[]{"Select", "Entity"}, highlyConData);
    }

    /**
     * Updates the list of existing networks in Cytoscape and their names.
     * Sets the first option in the combo box to NO_NET_SELECTED as defined in
     * the pnlSelectNetwork class.
     */
    private void updateNetworks()
    {
        Set<CyNetwork> availableNetworks = Cytoscape.getNetworkSet();
        networks = new CyNetwork[availableNetworks.size()];
        networkNames = new String[availableNetworks.size() + 1];
        networkNames[0] = NO_NET_SELECTED;
        int i = 0;
        for(CyNetwork net : availableNetworks)
        {
            networks[i] = net;
            networkNames[i + 1] = net.getTitle();
            i++;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                cboExistNetworks = new javax.swing.JComboBox(networkNames);
                lblExistNet = new javax.swing.JLabel();
                lblNewNet = new javax.swing.JLabel();
                lblDirect1 = new javax.swing.JLabel();
                lblDirect2 = new javax.swing.JLabel();
                btnCheckCompat = new javax.swing.JButton();
                lblCompatability = new javax.swing.JLabel();
                sepNetAdvanced = new javax.swing.JSeparator();
                chkNewNetwork = new javax.swing.JCheckBox();
                txtNewNetName = new javax.swing.JTextField();
                btnRefreshNetworks = new javax.swing.JButton();
                btnCreateNetwork = new javax.swing.JButton();
                btnCancel = new javax.swing.JButton();
                lblAdvancedOptions = new javax.swing.JLabel();
                chkCheckSynonyms = new javax.swing.JCheckBox();
                btnBackToResultPnl = new javax.swing.JButton();
                lblHighlyConnected = new javax.swing.JLabel();
                pnlHighlyCon = new javax.swing.JPanel();

                setPreferredSize(new java.awt.Dimension(490, 316));

                cboExistNetworks.setToolTipText("Select an existing network");
                cboExistNetworks.setMaximumSize(new java.awt.Dimension(330, 32767));
                cboExistNetworks.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cboExistNetworksActionPerformed(evt);
                        }
                });

                lblExistNet.setText("Download to existing network:");

                lblNewNet.setText("Create new network:");

                lblDirect1.setFont(new java.awt.Font("Tahoma", 1, 11));
                lblDirect1.setText("Only networks previously created by Pathway Access can be used.");

                lblDirect2.setText("Would you like to download new data to a new network or an existing network?");

                btnCheckCompat.setText("Check Compatability");
                btnCheckCompat.setToolTipText("Check the compatability of the selected network with this plugin");
                btnCheckCompat.setEnabled(false);
                btnCheckCompat.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCheckCompatActionPerformed(evt);
                        }
                });

                lblCompatability.setForeground(new java.awt.Color(153, 153, 153));
                lblCompatability.setText("Un-Checked...");

                chkNewNetwork.setToolTipText("Select to download data to a new network");
                chkNewNetwork.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chkNewNetworkActionPerformed(evt);
                        }
                });

                txtNewNetName.setText(ENTER_NEW_NET_NAME);
                txtNewNetName.setToolTipText("Type in the name of the new network");
                txtNewNetName.setEnabled(false);
                txtNewNetName.setMaximumSize(new java.awt.Dimension(330, 2147483647));

                btnRefreshNetworks.setText("Refresh");
                btnRefreshNetworks.setToolTipText("Click to refresh list of existing networks");
                btnRefreshNetworks.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRefreshNetworksActionPerformed(evt);
                        }
                });

                btnCreateNetwork.setText("Create Network");
                btnCreateNetwork.setToolTipText("Create the pathway using the specified options");
                btnCreateNetwork.setEnabled(false);
                btnCreateNetwork.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCreateNetworkActionPerformed(evt);
                        }
                });

                btnCancel.setText("Cancel");
                btnCancel.setToolTipText("Cancel the network creation");
                btnCancel.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCancelActionPerformed(evt);
                        }
                });

                lblAdvancedOptions.setFont(new java.awt.Font("Tahoma", 1, 11));
                lblAdvancedOptions.setText("Advanced Options:");

                chkCheckSynonyms.setText("Check to use Synonyms when combining data with an existing network");
                chkCheckSynonyms.setToolTipText("Check to use all known names for existing nodes when checking for matching nodes");

                btnBackToResultPnl.setText("Back to Results");
                btnBackToResultPnl.setToolTipText("Go back to search results");
                btnBackToResultPnl.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnBackToResultPnlActionPerformed(evt);
                        }
                });

                lblHighlyConnected.setText("Select common entities to exclude from the network:");

                pnlHighlyCon.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                pnlHighlyCon.setToolTipText("Select common entities to create duplicate nodes for each instance in the network");
                pnlHighlyCon.setLayout(new java.awt.CardLayout());

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnBackToResultPnl)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCancel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCreateNetwork))
                                        .addComponent(lblDirect1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblExistNet)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(btnCheckCompat)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(lblCompatability, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(btnRefreshNetworks)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cboExistNetworks, 0, 253, Short.MAX_VALUE))))
                                        .addComponent(lblDirect2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 480, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblNewNet)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chkNewNetwork)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtNewNetName, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addComponent(sepNetAdvanced, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAdvancedOptions)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(chkCheckSynonyms)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHighlyConnected)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnlHighlyCon, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDirect1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDirect2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblExistNet)
                                        .addComponent(cboExistNetworks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnRefreshNetworks))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnCheckCompat)
                                        .addComponent(lblCompatability))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(chkNewNetwork, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addGap(7, 7, 7)
                                                        .addComponent(lblNewNet)))
                                        .addComponent(txtNewNetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sepNetAdvanced, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAdvancedOptions)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkCheckSynonyms)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblHighlyConnected)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlHighlyCon, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCreateNetwork)
                                        .addComponent(btnCancel)
                                        .addComponent(btnBackToResultPnl)))
                );
        }// </editor-fold>//GEN-END:initComponents

    /**
     * Refreshes the list of networks in the combo box of existing networks
     * @param evt Refresh button press event
     */
    private void btnRefreshNetworksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshNetworksActionPerformed
        updateNetworks();
        cboExistNetworks.removeAllItems();
        for(String name : networkNames)
            cboExistNetworks.addItem(name);
        //If selected, cancel any tasks pertaining to existing networks
        winManager.cancel(true);
        //isExistNetCanceled = true;
        //if(compatCheckWorker != null)
        //    compatCheckWorker.cancel(true);
    }//GEN-LAST:event_btnRefreshNetworksActionPerformed

    /**
     * Stores whether compatability check is currently occuring
     */
    private boolean checkingCompatability = false;
    /**
     * Stores whether the currently selected existing network is compatible
     */
    private boolean curNetIsCompatible = false;
    /**
     * Stores the Thread Worker which the compatibility check works on
     */
    private NewThreadWorker compatCheckWorker = null;

    /**
     * Checks that the selected existing network has the correct CyNetwork
     * Search Client CyAttributes in order to download data to the network.
     * @param evt Check compatibility button press event
     */
    private void btnCheckCompatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckCompatActionPerformed
        //Don't perform if canceled
        //if(isExistNetCanceled) return;
        //Cancel task if button is pressed a second time
        if(checkingCompatability)
        {
            //isExistNetCanceled = true;
            winManager.cancel(true);
            compatCheckWorker.cancel(true);
            btnCheckCompat.setEnabled(false);
            lblCompatability.setText("Canceling");
            lblCompatability.setForeground(Color.RED);
            enableNext = false;
            btnCreateNetwork.setEnabled(false);
            return;
        }
        //Enable/Disable
        checkingCompatability = true;
        cboExistNetworks.setEnabled(false);
        btnRefreshNetworks.setEnabled(false);
        btnCheckCompat.setText("Cancel Check...");
        enableNext = false;
        btnCreateNetwork.setEnabled(false);
        lblCompatability.setText("Checking Compatability...");
        lblCompatability.setForeground(Color.GREEN);
        //Create Thread
        compatCheckWorker = new NewThreadWorker()
        {
            @Override
            public Void doInBackground()
            {
                String selectedNet = (String)(cboExistNetworks.getSelectedItem());
                //Do nothing is no network is selected (Shouldn't happen but added for safety)
                if(selectedNet.equals(NO_NET_SELECTED)) return null;
                //Get CyNetwork corresponding to selected network name
                CyNetwork selected = null;
                for(CyNetwork net : networks)
                    if(net.getTitle().equals(selectedNet))
                        selected = net;
                //Check the compatibility
                boolean compatible = false;
                if(!compatCheckWorker.isCancelled())//if(!isExistNetCanceled)
                {
                    compatible = SynonymTool.isCompatible(selected, compatCheckWorker);
                }
                if(compatCheckWorker.isCancelled())//if(isExistNetCanceled)
                {
                    cancel();
                    return null;
                }
                //Set label text/color accordingly and enable/disable "Next"
                if(compatible)
                {
                    enableNext = true;
                    curNetIsCompatible = true;
                    lblCompatability.setText("Compatible!");
                    lblCompatability.setForeground(Color.GREEN);
                }
                else
                {
                    enableNext = false;
                    curNetIsCompatible = false;
                    lblCompatability.setText("Not Compatible!");
                    lblCompatability.setForeground(Color.RED);
                }
                return null;
            }
            /**
             * Called if the check for compatibility is canceled
             */
            private void cancel()
            {
                lblCompatability.setText("Un-Checked...");
                lblCompatability.setForeground(new Color(153, 153, 153)); //Grey
                cboExistNetworks.setEnabled(true);
                btnRefreshNetworks.setEnabled(true);
                btnCheckCompat.setEnabled(false);
                enableNext = false;
                btnCreateNetwork.setEnabled(false);
            }
            @Override
            public void done()
            {
                //Enable/Disable
                cboExistNetworks.setEnabled(true);
                btnRefreshNetworks.setEnabled(true);
                btnCheckCompat.setText("Check Compatability");
                btnCreateNetwork.setEnabled(enableNext);
                checkingCompatability = false;
                //isExistNetCanceled = false;
            }
        };
        //Set the status area in the Main Panel to show updates for this worker
        winManager.setStatusWorker(compatCheckWorker, true);
        //If task isn't canceled, execute task
        if(!compatCheckWorker.isCancelled())//isExistNetCanceled)
            compatCheckWorker.execute();
    }//GEN-LAST:event_btnCheckCompatActionPerformed

    /**
     * Called when the New Network check box status is changed
     * @param evt Check box statubs change event
     */
    private void chkNewNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNewNetworkActionPerformed
        //If selected, cancel any tasks pertaining to existing networks
        boolean checked = chkNewNetwork.isSelected();
        //Cancel tasks being done for existing networks if checked is true
        if(checked) winManager.cancel(true);
        if(checked && compatCheckWorker != null)
            compatCheckWorker.cancel(true);
        //Disable/Enable buttons
        //cboExistNetworks.setEnabled(!checked);
        //btnRefreshNetworks.setEnabled(!checked);
        //boolean enableChkCompat = !((String)(cboExistNetworks.getSelectedItem()))
        //        .equals(NO_NET_SELECTED) && !curNetIsCompatible;
        //if(checked || enableChkCompat)
        //    btnCheckCompat.setEnabled(!checked);
        if(!checked)
            cboExistNetworksActionPerformed(null);
        txtNewNetName.setEnabled(checked);
        enableNext = checked;
        btnCreateNetwork.setEnabled(enableNext);
        chkCheckSynonyms.setEnabled(!checked);
    }//GEN-LAST:event_chkNewNetworkActionPerformed

    /**
     * Checks that all requirements for the current window are met, and displys
     * an error message if not met. If all requirements are met, sets the
     * selected highly connected entities in the database and begins the download
     * @param evt "Create Network" button press event
     */
    private void btnCreateNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNetworkActionPerformed
        //Get the CyNetwork to download to
        CyNetwork netToUse = null;
        //Add onto existing network
        if(!chkNewNetwork.isSelected())
        {
            //Get the selected CyNetwork
            String selected = (String)cboExistNetworks.getSelectedItem();
            for(int i = 0; i < networks.length; i++)
                if(selected.equals(networkNames[i + 1]) && enableNext == true)
                    netToUse = networks[i];
            if(netToUse == null)
            {
                JOptionPane.showMessageDialog(winManager.getPluginFrame(), "An error occured" +
                        "when checking the existing network. Please re-check the network's" +
                        "compatability with this plugin.",
                        "Network Use Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(!curNetIsCompatible)
            {
                JOptionPane.showMessageDialog(winManager.getPluginFrame(), "The selected " +
                        "network either isn't compatible or hasn't been checked for " +
                        "compatability. Please check for compatability and/or select " +
                        "a different network to add the new data to.",
                        "Network Selection Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        //Create a new network
        else
        {
            String newNetName = txtNewNetName.getText().trim();
            if(newNetName.equalsIgnoreCase(ENTER_NEW_NET_NAME) || newNetName.equals(""))
            {
                JOptionPane.showMessageDialog(winManager.getPluginFrame(), "Please " +
                            "choose a new network name or choose existing network " +
                            "to combine the new data with.",
                        "Network Name Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Set<CyNetwork> availableNetworks = Cytoscape.getNetworkSet();
            for(CyNetwork net : availableNetworks)
            {
                if(net.getTitle().trim().equalsIgnoreCase(newNetName))
                {
                    JOptionPane.showMessageDialog(winManager.getPluginFrame(), "The " +
                            "network name \"" + newNetName + "\" already exists. Please " +
                            "enter a new network name that doesn't already exist " +
                            "or choose existing network to combine the new data with.",
                        "Network Name Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            //Set the plugin frame to be on top of other winodws when the network 
            //is created to prevent switching to the Cytoscape window when the 
            //network view is created
            JFrame pluginFrame = winManager.getPluginFrame();
            pluginFrame.setAlwaysOnTop(true);
            //pluginFrame.validate();
            //Create the network
            try {
                netToUse = Cytoscape.createNetwork(newNetName, false);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(winManager.getPluginFrame(), "A Cytoscape " +
                        "error occured when attempting to create the new network. " +
                        "Please restart Cytoscape and try again.",
                        "Cytoscape Network Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //Switch always on top off so user can switch between winows again
            pluginFrame.setAlwaysOnTop(false);
        }
        //Get selected highly connected ent names, ignoring any nulls
        Object[][] selectedRows = highlyCon.getSelectedRows();
        int numRows = 0;
        if(selectedRows != null)
        {
            for(int row = 0; numRows < selectedRows.length; row++)
            {
                if(selectedRows[row][0]  != null) numRows++;
            }
        }
        //Set the selected highly connected entities in the database
        String[] selectedHighlyConNames = new String[numRows];
        for(int row = 0; row < numRows; row++)
            selectedHighlyConNames[row] = (String)selectedRows[row][0];
        database.setSelectedHighlyConnectedEntities(selectedHighlyConNames);

        //Download data to the CyNetwork
        database.download(netToUse, (chkCheckSynonyms.isSelected() && chkCheckSynonyms.isEnabled()));
    }//GEN-LAST:event_btnCreateNetworkActionPerformed

    /**
     * Cancels any current tasks and disposes of the plugin frame
     * @param evt Cancel button press event
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        winManager.cancel(true);
        winManager.close();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * Occurs when the combo box of existing networks selected item changes
     * @param evt Item selection event
     */
    private void cboExistNetworksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExistNetworksActionPerformed
        //Enable/Disable components depending on whether a network is currently selected
        String selected = (String) (cboExistNetworks.getSelectedItem());
        if(selected == null) return;
        if(selected.equals(NO_NET_SELECTED)) //No network selected
        {
            btnCheckCompat.setEnabled(false);
            btnCreateNetwork.setEnabled(false);
        }
        else
        {
            lblCompatability.setText("Un-Checked...");
            lblCompatability.setForeground(new Color(153, 153, 153)); //Grey
            btnCheckCompat.setEnabled(true);
            btnCreateNetwork.setEnabled(false);
            chkNewNetwork.setSelected(false);
            txtNewNetName.setEnabled(false);
            chkCheckSynonyms.setEnabled(true);
        }
    }//GEN-LAST:event_cboExistNetworksActionPerformed

    private void btnBackToResultPnlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToResultPnlActionPerformed
        winManager.displayPnlSearchResults();
    }//GEN-LAST:event_btnBackToResultPnlActionPerformed

    /**
     * Called when cancel button is selected
     * @param evt Cancel button selection event
     */
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnBackToResultPnl;
        private javax.swing.JButton btnCancel;
        private javax.swing.JButton btnCheckCompat;
        private javax.swing.JButton btnCreateNetwork;
        private javax.swing.JButton btnRefreshNetworks;
        private javax.swing.JComboBox cboExistNetworks;
        private javax.swing.JCheckBox chkCheckSynonyms;
        private javax.swing.JCheckBox chkNewNetwork;
        private javax.swing.JLabel lblAdvancedOptions;
        private javax.swing.JLabel lblCompatability;
        private javax.swing.JLabel lblDirect1;
        private javax.swing.JLabel lblDirect2;
        private javax.swing.JLabel lblExistNet;
        private javax.swing.JLabel lblHighlyConnected;
        private javax.swing.JLabel lblNewNet;
        private javax.swing.JPanel pnlHighlyCon;
        private javax.swing.JSeparator sepNetAdvanced;
        private javax.swing.JTextField txtNewNetName;
        // End of variables declaration//GEN-END:variables

}
