/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * pnlSelectNetwork.java
 *
 * Created on Jul 12, 2010, 11:00:52 AM
 */

package edu.iastate.pathwayaccess.cytoscape.ClientUI;

import edu.iastate.pathwayaccess.cytoscape.PathwayAccessPlugin;
import edu.iastate.pathwayaccess.cytoscape.ResultListItems.SearchResultInterface;
import edu.iastate.pathwayaccess.cytoscape.ResultListItems.NetworkResultInterface;
import edu.iastate.pathwayaccess.cytoscape.ResultListItems.ResultsFilterInterface;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import edu.iastate.pathwayaccess.cytoscape.PropertiesInterface;

/**
 *
 * @author Greg
 */
public class pnlResultsSplitPane extends javax.swing.JPanel {

    /**
     * Access to the Database
     */
    private PathwayAccessPlugin PathwayAccessPlugin;
    /**
     * Stores the window manager to call when next or back buttons are pressed
     */
    private WindowManager winManager;
    /**
     * String to set the search result details to if no search result is selected
     */
    private String NO_RESULT_SELECTED;
    /**
     * Panel containing details about the selected search result
     */
    private pnlDetails pnlDetails = null;
    /**
     * Panel containing loadable pathways
     */
    private pnlNetworkTabs pnlPathwayTabs = null;
    /**
     * The root node of the results tree
     */
    protected DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Results");

    /** Creates new form pnlSelectNetwork */
    public pnlResultsSplitPane(PathwayAccessPlugin PathwayAccessPlugin, WindowManager winManager,
            PropertiesInterface properties, javax.swing.JFrame frame) {
        /* Create Global Variables: Only created once so results will still be
         * displayed after closing and re-opening this frame */
        this.PathwayAccessPlugin = PathwayAccessPlugin;
        this.winManager = winManager;
        if(properties == null)
            throw new NullPointerException("The properties file cannot be null");
        NO_RESULT_SELECTED = "Select a search result " +
            "to see its details and available " + properties.getNetworkTypeName() + "(s)...";
        if(pnlDetails == null)
            pnlDetails = winManager.getPnlDetails();
        if(pnlPathwayTabs == null)
            pnlPathwayTabs = winManager.getPnlNetworkTabs();
        /* Create the Details Panel and Pathway Table */
        pnlDetails.setText(NO_RESULT_SELECTED);

        initComponents();

        /* Display the Details Panel */
        detailsLayout.add(pnlDetails, "DETAILS");
        detailsLayout.setVisible(true);
        CardLayout cl = (CardLayout)(detailsLayout.getLayout());
        cl.show(detailsLayout, "DETAILS");
        /* Display the Pathway Tabs Panel */
        pathwayTabsLayout.add(pnlPathwayTabs, "PATHWAYS");
        pathwayTabsLayout.setVisible(true);
        cl = (CardLayout)(pathwayTabsLayout.getLayout());
        cl.show(pathwayTabsLayout, "PATHWAYS");

        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                spltResultsPathways = new javax.swing.JSplitPane();
                pathwayTabsLayout = new javax.swing.JPanel();
                spltResultsDetails = new javax.swing.JSplitPane();
                detailsLayout = new javax.swing.JPanel();
                pnlResults = new javax.swing.JPanel();
                lblResults = new javax.swing.JLabel();
                scrResults = new javax.swing.JScrollPane();
                treeResults = new javax.swing.JTree(rootNode);

                spltResultsPathways.setDividerLocation(200);

                pathwayTabsLayout.setLayout(new java.awt.CardLayout());
                spltResultsPathways.setRightComponent(pathwayTabsLayout);

                spltResultsDetails.setDividerLocation(126);
                spltResultsDetails.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

                detailsLayout.setLayout(new java.awt.CardLayout());
                spltResultsDetails.setRightComponent(detailsLayout);

                lblResults.setText("<html><b>Results</b></html>");

                treeResults.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                        public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                                treeResultsValueChanged(evt);
                        }
                });
                scrResults.setViewportView(treeResults);

                javax.swing.GroupLayout pnlResultsLayout = new javax.swing.GroupLayout(pnlResults);
                pnlResults.setLayout(pnlResultsLayout);
                pnlResultsLayout.setHorizontalGroup(
                        pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlResultsLayout.createSequentialGroup()
                                .addComponent(lblResults)
                                .addContainerGap(131, Short.MAX_VALUE))
                        .addComponent(scrResults, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                );
                pnlResultsLayout.setVerticalGroup(
                        pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlResultsLayout.createSequentialGroup()
                                .addComponent(lblResults)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrResults, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                );

                spltResultsDetails.setLeftComponent(pnlResults);

                spltResultsPathways.setLeftComponent(spltResultsDetails);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 490, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spltResultsPathways, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 316, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spltResultsPathways, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                );
        }// </editor-fold>//GEN-END:initComponents

    private void treeResultsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeResultsValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           treeResults.getLastSelectedPathComponent();
        if (node == null) return;
        //If info is of a search result, display info
        if (node.getLevel() > 1) {//selected.getClass().equals(SearchResult.class)) { //node.isLeaf()) {
            //Get result info
            SearchResultInterface selected = (SearchResultInterface) node.getUserObject();
            //Set the details panel
            pnlDetails.setText(selected.getDetails());
            //Set the pathway table and filter tree
            ResultsFilterInterface[] filters = null;
            NetworkResultInterface[] paths = null;
            try {
                paths = PathwayAccessPlugin.getContainingPathways(selected, filters, winManager.getSelectedOrganism());
            } catch(Exception e) {
                PopupMessages.databaseConnectionError(null, winManager, PathwayAccessPlugin.getProperties(), true, true);
            }
            if(paths == null) paths = new NetworkResultInterface[0];
            pnlPathwayTabs.setResults(paths);
            System.out.println("Search result selected!");
        }
        //If not a search result, clear any past info
        else
        {
            pnlPathwayTabs.clearResults(NO_RESULT_SELECTED);
            System.out.println("Something other than a search result was selected!");
        }
    }//GEN-LAST:event_treeResultsValueChanged

    /**
     * Given a set of serach results, this will set the results tree and 
     * select the first result in the tree by default. The root nodes of the
     * tree will be the result of a call to
     * SearchResultInterface.getOrganismName(). Each result will be added to
     * its corresponding type.
     * @param results Search results to fill the tree of search results
     */
    public void setResults(ArrayList<SearchResultInterface> results)
    {
        //Check results
        if(results == null)
            return;
        //Clear the tree, pathways, filters, and details
        rootNode.removeAllChildren();
        pnlPathwayTabs.clearResults(NO_RESULT_SELECTED);
        //Create Nodes
        ArrayList<String> rootNodeTypeNames = new ArrayList();
        ArrayList<DefaultMutableTreeNode> rootNodes = new ArrayList();
        for(SearchResultInterface result : results)
        {
            //If a new type of search result, create a root node for it
            String typeName = result.getResultTypeName();//.getOrganismName();
            if(!rootNodeTypeNames.contains(typeName))
            {
                //Add the Type Name
                rootNodeTypeNames.add(0, typeName);
                //Add a root node for that type
                rootNodes.add(0, new DefaultMutableTreeNode(typeName));
                //Add the result to that root node
                DefaultMutableTreeNode newResult =
                        new DefaultMutableTreeNode(result);
                ((DefaultMutableTreeNode)rootNodes.get(0)).add(newResult);
                //The result has been add so we don't have to do anything else
                continue;
            }
            else //Type already exists
            {
                //Add the new result to the root node for that type
                int nodeIndex = rootNodeTypeNames.indexOf(typeName);
                DefaultMutableTreeNode newResult =
                        new DefaultMutableTreeNode(result);
                ((DefaultMutableTreeNode)rootNodes.get(nodeIndex)).add(newResult);
            }
        }
        //Get tree to be expanded at the first level
        for(DefaultMutableTreeNode newNode : rootNodes)
            rootNode.add(newNode);
        TreePath path = new TreePath(rootNode);
        treeResults.expandPath(path);
        ((DefaultTreeModel)treeResults.getModel()).reload();
    }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JPanel detailsLayout;
        private javax.swing.JLabel lblResults;
        private javax.swing.JPanel pathwayTabsLayout;
        private javax.swing.JPanel pnlResults;
        private javax.swing.JScrollPane scrResults;
        private javax.swing.JSplitPane spltResultsDetails;
        private javax.swing.JSplitPane spltResultsPathways;
        private javax.swing.JTree treeResults;
        // End of variables declaration//GEN-END:variables

}
