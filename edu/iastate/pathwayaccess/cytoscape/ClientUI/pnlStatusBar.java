package edu.iastate.pathwayaccess.cytoscape.ClientUI;

import edu.iastate.pathwayaccess.cytoscape.NewThreadWorker;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.SwingWorker.StateValue;

/**
 * This class implements a panel containing a loading bar, label for task title
 * and a cancel button. This components in this panel correspond to a given task
 * that is performed on a seperate thread using the NewThreadWorker class. When
 * the title of the task, progress, or status change in the NewThreadWorker, the
 * update is automatically reflected in the panel's components.
 *
 * @author Greg Hazen <ghazen@iastate.edu>
 */
public class pnlStatusBar extends javax.swing.JPanel implements PropertyChangeListener {

    /**
     * True to make the progress bar indeterminate (only shows it running,
     * doesn't show percent complete)
     */
    private boolean indeterminate = false;
    /**
     * Stores status of cancel button press
     */
    private boolean canceled = false;
    /**
     * Stores the task to be completed
     */
    private NewThreadWorker task = null;

    /**
     * Sets this panel as a listener to the given task and creates a panel with
     * a loading bar, task title label, and cancel button all associated with
     * the given task. A null task is not excepted. To initialize the panel
     * without having an associated task, a new task can be given without any
     * purpose (i.e. new pnlStatusBar(true, new NewThreadWorker());).
     * @param indeterminate True if the progress bar status is indeterminate
     * @param task Task performed on a seperate thread. ProperyChangeEvents are
     *             used to update status of the loadinhg bar and title.
     */
    public pnlStatusBar(boolean indeterminate, NewThreadWorker task) {
        task.addPropertyChangeListener(this);
        if(task == null)
            throw new NullPointerException("Task given to loading bar is null");
        this.task = task;
        this.indeterminate = indeterminate;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                progressBar = new javax.swing.JProgressBar();
                lblStatus = new javax.swing.JLabel();
                btnCancel = new javax.swing.JButton();

                progressBar.setIndeterminate(indeterminate);

                lblStatus.setText("Processing...");

                btnCancel.setText("Cancel");
                btnCancel.setToolTipText("Select to cancel the current proccess");
                btnCancel.setEnabled(false);
                btnCancel.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCancelActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                                .addComponent(btnCancel))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblStatus)
                                .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                );
        }// </editor-fold>//GEN-END:initComponents

    /**
     * Updates all variables in this panel according to events that occur in the
     * associated task.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        //Percent complete updated
        if ("progress".equals(evt.getPropertyName()))
        {
            progressBar.setValue((Integer) evt.getNewValue());
        }
        //Task has begun
        if("state".equals(evt.getPropertyName()) && evt.getNewValue().equals(StateValue.STARTED))
        {
            btnCancel.setEnabled(true);
        }
        //Task has completed
        if("state".equals(evt.getPropertyName()) && evt.getNewValue().equals(StateValue.DONE))
        {
            btnCancel.setEnabled(false);
            if(canceled)
                setTaskString("Task Canceled");
            else
                setTaskString("Task Complete");
            if(progressBar.isIndeterminate()) //Set progress bar to stop scanning
                progressBar.setIndeterminate(false);
            progressBar.setValue(100);
        }
        //Task title updated
        if("task string".equals(evt.getPropertyName()))
        {
            setTaskString((String) evt.getNewValue());
        }
    }

    /**
     * Used to show what the current task is: changes the label next to the
     * progress bar to the given string. If the string is longer than 40
     * characters, the first 37 characters are used and "..." is added to the 
     * end.  If the given value is null, the title is set to blank.
     * @param task String to change the label to
     */
    public void setTaskString(String task) {
        if(task == null)
            lblStatus.setText("");
        if(task.length() > 70)
            task = task.substring(0, 67) + "...";
        lblStatus.setText(task);
    }

    /**
     * Attempts to cancel the associated task and sets the task title to
     * "Canceling Task..." Also, disables the cancel button to prevent multiple
     * cancelations and sets a boolean to set the task completion text to
     * "Task Canceled".
     * @param evt
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        canceled = true;
        setTaskString("Canceling Task...");
        task.cancel(true);
        btnCancel.setEnabled(false);
    }//GEN-LAST:event_btnCancelActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnCancel;
        private javax.swing.JLabel lblStatus;
        private javax.swing.JProgressBar progressBar;
        // End of variables declaration//GEN-END:variables

}
